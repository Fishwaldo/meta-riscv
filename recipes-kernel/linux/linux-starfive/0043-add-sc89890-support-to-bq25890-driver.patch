From 679f10c0f65dd4337a30063dc92eccfde8602b82 Mon Sep 17 00:00:00 2001
From: Justin Hammond <justin@dynam.ac>
Date: Fri, 11 Aug 2023 15:47:16 +0000
Subject: [PATCH] add sc89890 support to bq25890 driver

---
 drivers/power/supply/bq25890_charger.c | 148 +++++++++++++++++--------
 1 file changed, 104 insertions(+), 44 deletions(-)

diff --git a/drivers/power/supply/bq25890_charger.c b/drivers/power/supply/bq25890_charger.c
index 1a956281de62..8ca7b8858552 100644
--- a/drivers/power/supply/bq25890_charger.c
+++ b/drivers/power/supply/bq25890_charger.c
@@ -21,11 +21,13 @@
 #include <linux/of.h>
 
 #define BQ25890_MANUFACTURER		"Texas Instruments"
+#define SC89890_MANUFACTURER		"SouthChip"
 #define BQ25890_IRQ_PIN			"bq25890_irq"
 
 #define BQ25890_ID			3
 #define BQ25895_ID			7
 #define BQ25896_ID			0
+#define SC89890_ID			4
 
 #define PUMP_EXPRESS_START_DELAY	(5 * HZ)
 #define PUMP_EXPRESS_MAX_TRIES		6
@@ -36,6 +38,7 @@ enum bq25890_chip_version {
 	BQ25892,
 	BQ25895,
 	BQ25896,
+	SC89890,
 };
 
 static const char *const bq25890_chip_name[] = {
@@ -43,6 +46,7 @@ static const char *const bq25890_chip_name[] = {
 	"BQ25892",
 	"BQ25895",
 	"BQ25896",
+	"SC89890",
 };
 
 enum bq25890_fields {
@@ -68,7 +72,7 @@ enum bq25890_fields {
 	F_FORCE_VINDPM, F_VINDPM,				     /* Reg0D */
 	F_THERM_STAT, F_BATV,					     /* Reg0E */
 	F_SYSV,							     /* Reg0F */
-	F_TSPCT,						     /* Reg10 */
+	F_TSPCT,						     /* Reg10  - not present on SC89890 */
 	F_VBUS_GD, F_VBUSV,					     /* Reg11 */
 	F_ICHGR,						     /* Reg12 */
 	F_VDPM_STAT, F_IDPM_STAT, F_IDPM_LIM,			     /* Reg13 */
@@ -91,6 +95,7 @@ struct bq25890_init_data {
 	u8 treg;	/* thermal regulation threshold */
 	u8 rbatcomp;	/* IBAT sense resistor value    */
 	u8 vclamp;	/* IBAT compensation voltage limit */
+	u8 iinlim_man; /* manual input current limit in cases where we can't determine the Charger Type */
 };
 
 struct bq25890_state {
@@ -185,7 +190,7 @@ static const struct reg_field bq25890_reg_fields[] = {
 	[F_BOOSTF]		= REG_FIELD(0x02, 5, 5),
 	[F_ICO_EN]		= REG_FIELD(0x02, 4, 4),
 	[F_HVDCP_EN]		= REG_FIELD(0x02, 3, 3),  // reserved on BQ25896
-	[F_MAXC_EN]		= REG_FIELD(0x02, 2, 2),  // reserved on BQ25896
+	[F_MAXC_EN]		= REG_FIELD(0x02, 2, 2),  // reserved on BQ25896/SC89890
 	[F_FORCE_DPM]		= REG_FIELD(0x02, 1, 1),
 	[F_AUTO_DPDM_EN]	= REG_FIELD(0x02, 0, 0),
 	/* REG03 */
@@ -194,7 +199,7 @@ static const struct reg_field bq25890_reg_fields[] = {
 	[F_OTG_CFG]		= REG_FIELD(0x03, 5, 5),
 	[F_CHG_CFG]		= REG_FIELD(0x03, 4, 4),
 	[F_SYSVMIN]		= REG_FIELD(0x03, 1, 3),
-	[F_MIN_VBAT_SEL]	= REG_FIELD(0x03, 0, 0), // BQ25896 only
+	[F_MIN_VBAT_SEL]	= REG_FIELD(0x03, 0, 0), // BQ25896/SC89890 only
 	/* REG04 */
 	[F_PUMPX_EN]		= REG_FIELD(0x04, 7, 7),
 	[F_ICHG]		= REG_FIELD(0x04, 0, 6),
@@ -228,12 +233,12 @@ static const struct reg_field bq25890_reg_fields[] = {
 	/* REG0A */
 	[F_BOOSTV]		= REG_FIELD(0x0A, 4, 7),
 	[F_BOOSTI]		= REG_FIELD(0x0A, 0, 2), // reserved on BQ25895
-	[F_PFM_OTG_DIS]		= REG_FIELD(0x0A, 3, 3), // BQ25896 only
+	[F_PFM_OTG_DIS]		= REG_FIELD(0x0A, 3, 3), // BQ25896/SC89890 only
 	/* REG0B */
 	[F_VBUS_STAT]		= REG_FIELD(0x0B, 5, 7),
 	[F_CHG_STAT]		= REG_FIELD(0x0B, 3, 4),
 	[F_PG_STAT]		= REG_FIELD(0x0B, 2, 2),
-	[F_SDP_STAT]		= REG_FIELD(0x0B, 1, 1), // reserved on BQ25896
+	[F_SDP_STAT]		= REG_FIELD(0x0B, 1, 1), // reserved on BQ25896/SC89890
 	[F_VSYS_STAT]		= REG_FIELD(0x0B, 0, 0),
 	/* REG0C */
 	[F_WD_FAULT]		= REG_FIELD(0x0C, 7, 7),
@@ -250,7 +255,7 @@ static const struct reg_field bq25890_reg_fields[] = {
 	/* REG0F */
 	[F_SYSV]		= REG_FIELD(0x0F, 0, 6),
 	/* REG10 */
-	[F_TSPCT]		= REG_FIELD(0x10, 0, 6),
+	[F_TSPCT]		= REG_FIELD(0x10, 0, 6), // reserved on SC89890
 	/* REG11 */
 	[F_VBUS_GD]		= REG_FIELD(0x11, 7, 7),
 	[F_VBUSV]		= REG_FIELD(0x11, 0, 6),
@@ -264,8 +269,8 @@ static const struct reg_field bq25890_reg_fields[] = {
 	[F_REG_RST]		= REG_FIELD(0x14, 7, 7),
 	[F_ICO_OPTIMIZED]	= REG_FIELD(0x14, 6, 6),
 	[F_PN]			= REG_FIELD(0x14, 3, 5),
-	[F_TS_PROFILE]		= REG_FIELD(0x14, 2, 2),
-	[F_DEV_REV]		= REG_FIELD(0x14, 0, 1)
+	[F_TS_PROFILE]		= REG_FIELD(0x14, 2, 2), // reserved on SC89890
+	[F_DEV_REV]		= REG_FIELD(0x14, 0, 1) // reserved on SC89890
 };
 
 /*
@@ -303,6 +308,12 @@ static const u32 bq25890_boosti_tbl[] = {
 
 #define BQ25890_BOOSTI_TBL_SIZE		ARRAY_SIZE(bq25890_boosti_tbl)
 
+static const u32 sc89890_boosti_tbl[] = {
+	500000, 750000, 1200000, 1400000, 1650000, 1875000, 2150000, 2450000
+};
+
+#define SC89890_BOOSTI_TBL_SIZE		ARRAY_SIZE(sc89890_boosti_tbl)
+
 /* NTC 10K temperature lookup table in tenths of a degree */
 static const u32 bq25890_tspct_tbl[] = {
 	850, 840, 830, 820, 810, 800, 790, 780,
@@ -336,10 +347,12 @@ struct bq25890_lookup {
 	u32 size;
 };
 
-static const union {
+union bq25890_table {
 	struct bq25890_range  rt;
 	struct bq25890_lookup lt;
-} bq25890_tables[] = {
+};
+
+static const union bq25890_table bq25890_tables[] = {
 	/* range tables */
 	/* TODO: BQ25896 has max ICHG 3008 mA */
 	[TBL_ICHG] =	 { .rt = {0,        5056000, 64000} },	 /* uA */
@@ -358,6 +371,27 @@ static const union {
 	[TBL_TSPCT] =	{ .lt = {bq25890_tspct_tbl, BQ25890_TSPCT_TBL_SIZE} }
 };
 
+static const union bq25890_table sc89890_tables[] = {
+	/* range tables */
+	/* ICHG Table is different on SC89890 - Reg 4 - ICHG */
+	[TBL_ICHG] =	{ .rt = {0,	  5040000, 60000} },	 /* uA */
+	/* ITERM/IPRECHG is different on SC89890 - Reg 5 IPRECHG/ITERM */
+	[TBL_ITERM] =	{ .rt = {60000,   960000, 60000} },	 /* uA */
+	[TBL_IINLIM] =   { .rt = {100000,  3250000, 50000} },	 /* uA */
+	[TBL_VREG] =	{ .rt = {3840000, 4608000, 16000} },	 /* uV */
+	/* BOOSTV is different on SC89890 - Reg A BOOSTV */
+	[TBL_BOOSTV] =	{ .rt = {3900000, 5400000, 100000} },	 /* uV */
+	[TBL_SYSVMIN] = { .rt = {3000000, 3700000, 100000} },	 /* uV */
+	[TBL_VBATCOMP] ={ .rt = {0,        224000, 32000} },	 /* uV */
+	[TBL_RBATCOMP] ={ .rt = {0,        140000, 20000} },	 /* uOhm */
+
+	/* lookup tables */
+	[TBL_TREG] =	{ .lt = {bq25890_treg_tbl, BQ25890_TREG_TBL_SIZE} },
+	[TBL_BOOSTI] =	{ .lt = {sc89890_boosti_tbl, SC89890_BOOSTI_TBL_SIZE} },
+	[TBL_TSPCT] =	{ .lt = {bq25890_tspct_tbl, BQ25890_TSPCT_TBL_SIZE} }	
+};
+
+
 static int bq25890_field_read(struct bq25890_device *bq,
 			      enum bq25890_fields field_id)
 {
@@ -377,18 +411,28 @@ static int bq25890_field_write(struct bq25890_device *bq,
 	return regmap_field_write(bq->rmap_fields[field_id], val);
 }
 
-static u8 bq25890_find_idx(u32 value, enum bq25890_table_ids id)
+static union bq25890_table *bq25890_get_chip_table(struct bq25890_device *bq,
+				    enum bq25890_table_ids id)
+{
+	if (bq->chip_version == SC89890)
+		return (void *)&sc89890_tables[id];
+	else
+		return (void *)&bq25890_tables[id];
+}
+
+static u8 bq25890_find_idx(struct bq25890_device *bq, u32 value, enum bq25890_table_ids id)
 {
 	u8 idx;
+	const union bq25890_table *lutable = bq25890_get_chip_table(bq, id);
 
 	if (id >= TBL_TREG) {
-		const u32 *tbl = bq25890_tables[id].lt.tbl;
-		u32 tbl_size = bq25890_tables[id].lt.size;
+		const u32 *tbl = lutable->lt.tbl;
+		u32 tbl_size = lutable->lt.size;
 
 		for (idx = 1; idx < tbl_size && tbl[idx] <= value; idx++)
 			;
 	} else {
-		const struct bq25890_range *rtbl = &bq25890_tables[id].rt;
+		const struct bq25890_range *rtbl = &lutable->rt;
 		u8 rtbl_size;
 
 		rtbl_size = (rtbl->max - rtbl->min) / rtbl->step + 1;
@@ -402,16 +446,17 @@ static u8 bq25890_find_idx(u32 value, enum bq25890_table_ids id)
 	return idx - 1;
 }
 
-static u32 bq25890_find_val(u8 idx, enum bq25890_table_ids id)
+static u32 bq25890_find_val(struct bq25890_device *bq, u8 idx, enum bq25890_table_ids id)
 {
 	const struct bq25890_range *rtbl;
+	const union bq25890_table *lutable = bq25890_get_chip_table(bq, id);
 
 	/* lookup table? */
 	if (id >= TBL_TREG)
-		return bq25890_tables[id].lt.tbl[idx];
+		return lutable->lt.tbl[idx];
 
 	/* range table */
-	rtbl = &bq25890_tables[id].rt;
+	rtbl = &lutable->rt;
 
 	return (rtbl->min + idx * rtbl->step);
 }
@@ -461,7 +506,7 @@ static int bq25890_get_vbus_voltage(struct bq25890_device *bq)
 	if (ret < 0)
 		return ret;
 
-	return bq25890_find_val(ret, TBL_VBUSV);
+	return bq25890_find_val(bq, ret, TBL_VBUSV);
 }
 
 static void bq25890_update_state(struct bq25890_device *bq,
@@ -525,8 +570,11 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 		break;
 
 	case POWER_SUPPLY_PROP_MANUFACTURER:
-		val->strval = BQ25890_MANUFACTURER;
-		break;
+		if (bq->chip_version == SC89890) {
+			val->strval = SC89890_MANUFACTURER;
+		} else {
+			val->strval = BQ25890_MANUFACTURER;
+		}		break;
 
 	case POWER_SUPPLY_PROP_MODEL_NAME:
 		val->strval = bq25890_chip_name[bq->chip_version];
@@ -550,11 +598,11 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 		break;
 
 	case POWER_SUPPLY_PROP_PRECHARGE_CURRENT:
-		val->intval = bq25890_find_val(bq->init_data.iprechg, TBL_ITERM);
+		val->intval = bq25890_find_val(bq, bq->init_data.iprechg, TBL_ITERM);
 		break;
 
 	case POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT:
-		val->intval = bq25890_find_val(bq->init_data.iterm, TBL_ITERM);
+		val->intval = bq25890_find_val(bq, bq->init_data.iterm, TBL_ITERM);
 		break;
 
 	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
@@ -562,7 +610,7 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 		if (ret < 0)
 			return ret;
 
-		val->intval = bq25890_find_val(ret, TBL_IINLIM);
+		val->intval = bq25890_find_val(bq, ret, TBL_IINLIM);
 		break;
 
 	case POWER_SUPPLY_PROP_CURRENT_NOW:	/* I_BAT now */
@@ -595,7 +643,7 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 		ret = bq25890_field_read(bq, F_ICHG);
 		if (ret < 0)
 			return ret;
-		val->intval = bq25890_find_val(ret, TBL_ICHG);
+		val->intval = bq25890_find_val(bq, ret, TBL_ICHG);
 
 		/* When temperature is too low, charge current is decreased */
 		if (bq->state.ntc_fault == NTC_FAULT_COOL) {
@@ -618,7 +666,7 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 		 *
 		 * This value is constant for each battery and set from DT.
 		 */
-		val->intval = bq25890_find_val(bq->init_data.ichg, TBL_ICHG);
+		val->intval = bq25890_find_val(bq, bq->init_data.ichg, TBL_ICHG);
 		break;
 
 	case POWER_SUPPLY_PROP_VOLTAGE_NOW:	/* V_BAT now */
@@ -652,7 +700,7 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 		if (ret < 0)
 			return ret;
 
-		val->intval = bq25890_find_val(ret, TBL_VREG);
+		val->intval = bq25890_find_val(bq, ret, TBL_VREG);
 		break;
 
 	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX:	/* V_BAT max */
@@ -663,7 +711,7 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 		 *
 		 * This value is constant for each battery and set from DT.
 		 */
-		val->intval = bq25890_find_val(bq->init_data.vreg, TBL_VREG);
+		val->intval = bq25890_find_val(bq, bq->init_data.vreg, TBL_VREG);
 		break;
 
 	case POWER_SUPPLY_PROP_TEMP:
@@ -672,7 +720,7 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 			return ret;
 
 		/* convert TS percentage into rough temperature */
-		val->intval = bq25890_find_val(ret, TBL_TSPCT);
+		val->intval = bq25890_find_val(bq, ret, TBL_TSPCT);
 		break;
 
 	default:
@@ -693,15 +741,15 @@ static int bq25890_power_supply_set_property(struct power_supply *psy,
 
 	switch (psp) {
 	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT:
-		maxval = bq25890_find_val(bq->init_data.ichg, TBL_ICHG);
-		lval = bq25890_find_idx(min(val->intval, maxval), TBL_ICHG);
+		maxval = bq25890_find_val(bq, bq->init_data.ichg, TBL_ICHG);
+		lval = bq25890_find_idx(bq, min(val->intval, maxval), TBL_ICHG);
 		return bq25890_field_write(bq, F_ICHG, lval);
 	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE:
-		maxval = bq25890_find_val(bq->init_data.vreg, TBL_VREG);
-		lval = bq25890_find_idx(min(val->intval, maxval), TBL_VREG);
+		maxval = bq25890_find_val(bq, bq->init_data.vreg, TBL_VREG);
+		lval = bq25890_find_idx(bq, min(val->intval, maxval), TBL_VREG);
 		return bq25890_field_write(bq, F_VREG, lval);
 	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
-		lval = bq25890_find_idx(val->intval, TBL_IINLIM);
+		lval = bq25890_find_idx(bq, val->intval, TBL_IINLIM);
 		return bq25890_field_write(bq, F_IINLIM, lval);
 	case POWER_SUPPLY_PROP_ONLINE:
 		ret = bq25890_field_write(bq, F_EN_HIZ, !val->intval);
@@ -737,7 +785,7 @@ static int bq25890_charger_get_scaled_iinlim_regval(struct bq25890_device *bq,
 						    int iinlim_ua)
 {
 	iinlim_ua = iinlim_ua * bq->iinlim_percentage / 100;
-	return bq25890_find_idx(iinlim_ua, TBL_IINLIM);
+	return bq25890_find_idx(bq, iinlim_ua, TBL_IINLIM);
 }
 
 /* On the BQ25892 try to get charger-type info from our supplier */
@@ -771,9 +819,13 @@ static void bq25890_charger_external_power_changed(struct power_supply *psy)
 		break;
 	case POWER_SUPPLY_USB_TYPE_SDP:
 	default:
-		input_current_limit = bq25890_charger_get_scaled_iinlim_regval(bq, 500000);
+		ret = bq25890_find_val(bq, bq->init_data.iinlim_man, TBL_IINLIM);
+		dev_dbg(bq->dev, "Input current limit from DT: %d (%d)\n", ret, bq->init_data.iinlim_man);
+		if (ret < 0)
+			ret = 500000;
+		input_current_limit = bq25890_charger_get_scaled_iinlim_regval(bq, ret);
 	}
-
+	dev_dbg(bq->dev, "Setting Input Current Limit: %d\n", input_current_limit);
 	bq25890_field_write(bq, F_IINLIM, input_current_limit);
 	power_supply_changed(psy);
 }
@@ -903,6 +955,7 @@ static int bq25890_rw_init_data(struct bq25890_device *bq)
 		enum bq25890_fields id;
 		u8 *value;
 	} init_data[] = {
+		{F_IINLIM,   &bq->init_data.iinlim_man},
 		{F_ICHG,	 &bq->init_data.ichg},
 		{F_VREG,	 &bq->init_data.vreg},
 		{F_ITERM,	 &bq->init_data.iterm},
@@ -1021,7 +1074,7 @@ static const struct power_supply_desc bq25890_power_supply_desc = {
 
 static int bq25890_power_supply_init(struct bq25890_device *bq)
 {
-	struct power_supply_config psy_cfg = { .drv_data = bq, };
+	struct power_supply_config psy_cfg = { .drv_data = bq, .of_node = bq->dev->of_node};
 
 	/* Get ID for the device */
 	mutex_lock(&bq25890_id_mutex);
@@ -1286,12 +1339,6 @@ static int bq25890_get_chip_version(struct bq25890_device *bq)
 		return id;
 	}
 
-	rev = bq25890_field_read(bq, F_DEV_REV);
-	if (rev < 0) {
-		dev_err(bq->dev, "Cannot read chip revision: %d\n", rev);
-		return rev;
-	}
-
 	switch (id) {
 	case BQ25890_ID:
 		bq->chip_version = BQ25890;
@@ -1299,6 +1346,11 @@ static int bq25890_get_chip_version(struct bq25890_device *bq)
 
 	/* BQ25892 and BQ25896 share same ID 0 */
 	case BQ25896_ID:
+		rev = bq25890_field_read(bq, F_DEV_REV);
+		if (rev < 0) {
+			dev_err(bq->dev, "Cannot read chip revision: %d\n", rev);
+			return rev;
+		}
 		switch (rev) {
 		case 2:
 			bq->chip_version = BQ25896;
@@ -1318,6 +1370,10 @@ static int bq25890_get_chip_version(struct bq25890_device *bq)
 		bq->chip_version = BQ25895;
 		break;
 
+	case SC89890_ID:
+		bq->chip_version = SC89890;
+		break;
+
 	default:
 		dev_err(bq->dev, "Unknown chip ID %d\n", id);
 		return -ENODEV;
@@ -1363,11 +1419,13 @@ static int bq25890_fw_read_u32_props(struct bq25890_device *bq)
 		{"ti,thermal-regulation-threshold", true, TBL_TREG, &init->treg},
 		{"ti,ibatcomp-micro-ohms", true, TBL_RBATCOMP, &init->rbatcomp},
 		{"ti,ibatcomp-clamp-microvolt", true, TBL_VBATCOMP, &init->vclamp},
+		{"ti,input-current-limit", true, TBL_IINLIM, &init->iinlim_man},
 	};
 
 	/* initialize data for optional properties */
 	init->treg = 3; /* 120 degrees Celsius */
 	init->rbatcomp = init->vclamp = 0; /* IBAT compensation disabled */
+	init->iinlim_man = 10; /* 500mA */
 
 	for (i = 0; i < ARRAY_SIZE(props); i++) {
 		ret = device_property_read_u32(bq->dev, props[i].name,
@@ -1382,7 +1440,7 @@ static int bq25890_fw_read_u32_props(struct bq25890_device *bq)
 			return ret;
 		}
 
-		*props[i].conv_data = bq25890_find_idx(property,
+		*props[i].conv_data = bq25890_find_idx(bq, property,
 						       props[i].tbl_id);
 	}
 
@@ -1623,6 +1681,7 @@ static const struct i2c_device_id bq25890_i2c_ids[] = {
 	{ "bq25892", 0 },
 	{ "bq25895", 0 },
 	{ "bq25896", 0 },
+	{ "sc89890", 0 },
 	{},
 };
 MODULE_DEVICE_TABLE(i2c, bq25890_i2c_ids);
@@ -1632,6 +1691,7 @@ static const struct of_device_id bq25890_of_match[] __maybe_unused = {
 	{ .compatible = "ti,bq25892", },
 	{ .compatible = "ti,bq25895", },
 	{ .compatible = "ti,bq25896", },
+	{ .compatible = "sc,sc89890", }, 
 	{ },
 };
 MODULE_DEVICE_TABLE(of, bq25890_of_match);
