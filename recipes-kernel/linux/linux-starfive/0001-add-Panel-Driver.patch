From 3698afae566ec1ee93bdfd35d683f76e91484ece Mon Sep 17 00:00:00 2001
From: Justin Hammond <justin@dynam.ac>
Date: Mon, 7 Aug 2023 05:34:30 +0000
Subject: [PATCH] add Panel Driver

---
 .../gpu/drm/panel/panel-jadard-jd9365da-h3.c  | 283 +++++-------------
 .../gpu/drm/verisilicon/starfive_drm_dsi.c    |   9 +-
 drivers/gpu/drm/verisilicon/vs_dc.c           |   2 +-
 3 files changed, 90 insertions(+), 204 deletions(-)

diff --git a/drivers/gpu/drm/panel/panel-jadard-jd9365da-h3.c b/drivers/gpu/drm/panel/panel-jadard-jd9365da-h3.c
index 0b7341cecc45..6aa4da2286b3 100755
--- a/drivers/gpu/drm/panel/panel-jadard-jd9365da-h3.c
+++ b/drivers/gpu/drm/panel/panel-jadard-jd9365da-h3.c
@@ -78,6 +78,8 @@ struct jadard {
 	struct regulator *vccio;
 	struct gpio_desc *reset;
 	struct gpio_desc *enable;
+	struct gpio_desc *blen;
+	enum drm_panel_orientation orientation;
 	bool enable_initialized;
 };
 
@@ -149,9 +151,11 @@ static int jadard_enable(struct drm_panel *panel)
 			err = 0;
 			break;
 		case CMD_TYPE_DCS:
-			err = mipi_dsi_dcs_write(dsi, cmd->data[0],
+			/*err = mipi_dsi_dcs_write(dsi, cmd->data[0],
 						 cmd->len <= 1 ? NULL : &cmd->data[1],
 						 cmd->len - 1);
+			*/
+			err = mipi_dsi_dcs_write_buffer(dsi, cmd->data, cmd->len);
 			break;
 		default:
 			err = -EINVAL;
@@ -212,13 +216,13 @@ static int jadard_prepare(struct drm_panel *panel)
 	gpiod_set_value(jadard->enable, 1);
 	mdelay(100);
 
-	gpiod_direction_output(jadard->reset, 0);
+	/*gpiod_direction_output(jadard->reset, 0);
 	mdelay(100);
 	gpiod_set_value(jadard->reset, 1);
 	mdelay(100);
 	gpiod_set_value(jadard->reset, 0);
 	mdelay(100);
-	gpiod_set_value(jadard->reset, 1);
+	gpiod_set_value(jadard->reset, 1);*/
 	mdelay(150);
 
 	return 0;
@@ -228,7 +232,7 @@ static int jadard_unprepare(struct drm_panel *panel)
 {
 	struct jadard *jadard = panel_to_jadard(panel);
 
-	gpiod_set_value(jadard->reset, 1);
+	//gpiod_set_value(jadard->reset, 1);
 	msleep(120);
 #if 0
 	regulator_disable(jadard->vdd);
@@ -258,6 +262,8 @@ static int jadard_get_modes(struct drm_panel *panel,
 	connector->display_info.width_mm = mode->width_mm;
 	connector->display_info.height_mm = mode->height_mm;
 
+	drm_connector_set_panel_orientation(connector, jadard->orientation);
+
 	return 1;
 }
 
@@ -288,210 +294,62 @@ static const struct drm_panel_funcs jadard_funcs = {
 };
 
 static const struct jadard_init_cmd cz101b4001_init_cmds[] = {
-	_INIT_CMD_DCS(0x01),
-	_INIT_CMD_DELAY(100),
-	_INIT_CMD_DCS(0xE0, 0x00),
-	_INIT_CMD_DCS(0xE1, 0x93),
-	_INIT_CMD_DCS(0xE2, 0x65),
-	_INIT_CMD_DCS(0xE3, 0xF8),
-	_INIT_CMD_DCS(0x80, 0x03),
-	_INIT_CMD_DCS(0xE0, 0x01),
-	_INIT_CMD_DCS(0x00, 0x00),
-	_INIT_CMD_DCS(0x01, 0x7E),
-	_INIT_CMD_DCS(0x03, 0x00),
-	_INIT_CMD_DCS(0x04, 0x65),
-	_INIT_CMD_DCS(0x0C, 0x74),
-	_INIT_CMD_DCS(0x17, 0x00),
-	_INIT_CMD_DCS(0x18, 0xB7),
-	_INIT_CMD_DCS(0x19, 0x00),
-	_INIT_CMD_DCS(0x1A, 0x00),
-	_INIT_CMD_DCS(0x1B, 0xB7),
-	_INIT_CMD_DCS(0x1C, 0x00),
-	_INIT_CMD_DCS(0x24, 0xFE),
-	_INIT_CMD_DCS(0x37, 0x19),
-	_INIT_CMD_DCS(0x38, 0x05),
-	_INIT_CMD_DCS(0x39, 0x00),
-	_INIT_CMD_DCS(0x3A, 0x01),
-	_INIT_CMD_DCS(0x3B, 0x01),
-	_INIT_CMD_DCS(0x3C, 0x70),
-	_INIT_CMD_DCS(0x3D, 0xFF),
-	_INIT_CMD_DCS(0x3E, 0xFF),
-	_INIT_CMD_DCS(0x3F, 0xFF),
-	_INIT_CMD_DCS(0x40, 0x06),
-	_INIT_CMD_DCS(0x41, 0xA0),
-	_INIT_CMD_DCS(0x43, 0x1E),
-	_INIT_CMD_DCS(0x44, 0x0F),
-	_INIT_CMD_DCS(0x45, 0x28),
-	_INIT_CMD_DCS(0x4B, 0x04),
-	_INIT_CMD_DCS(0x55, 0x02),
-	_INIT_CMD_DCS(0x56, 0x01),
-	_INIT_CMD_DCS(0x57, 0xA9),
-	_INIT_CMD_DCS(0x58, 0x0A),
-	_INIT_CMD_DCS(0x59, 0x0A),
-	_INIT_CMD_DCS(0x5A, 0x37),
-	_INIT_CMD_DCS(0x5B, 0x19),
-	_INIT_CMD_DCS(0x5D, 0x78),
-	_INIT_CMD_DCS(0x5E, 0x63),
-	_INIT_CMD_DCS(0x5F, 0x54),
-	_INIT_CMD_DCS(0x60, 0x49),
-	_INIT_CMD_DCS(0x61, 0x45),
-	_INIT_CMD_DCS(0x62, 0x38),
-	_INIT_CMD_DCS(0x63, 0x3D),
-	_INIT_CMD_DCS(0x64, 0x28),
-	_INIT_CMD_DCS(0x65, 0x43),
-	_INIT_CMD_DCS(0x66, 0x41),
-	_INIT_CMD_DCS(0x67, 0x43),
-	_INIT_CMD_DCS(0x68, 0x62),
-	_INIT_CMD_DCS(0x69, 0x50),
-	_INIT_CMD_DCS(0x6A, 0x57),
-	_INIT_CMD_DCS(0x6B, 0x49),
-	_INIT_CMD_DCS(0x6C, 0x44),
-	_INIT_CMD_DCS(0x6D, 0x37),
-	_INIT_CMD_DCS(0x6E, 0x23),
-	_INIT_CMD_DCS(0x6F, 0x10),
-	_INIT_CMD_DCS(0x70, 0x78),
-	_INIT_CMD_DCS(0x71, 0x63),
-	_INIT_CMD_DCS(0x72, 0x54),
-	_INIT_CMD_DCS(0x73, 0x49),
-	_INIT_CMD_DCS(0x74, 0x45),
-	_INIT_CMD_DCS(0x75, 0x38),
-	_INIT_CMD_DCS(0x76, 0x3D),
-	_INIT_CMD_DCS(0x77, 0x28),
-	_INIT_CMD_DCS(0x78, 0x43),
-	_INIT_CMD_DCS(0x79, 0x41),
-	_INIT_CMD_DCS(0x7A, 0x43),
-	_INIT_CMD_DCS(0x7B, 0x62),
-	_INIT_CMD_DCS(0x7C, 0x50),
-	_INIT_CMD_DCS(0x7D, 0x57),
-	_INIT_CMD_DCS(0x7E, 0x49),
-	_INIT_CMD_DCS(0x7F, 0x44),
-	_INIT_CMD_DCS(0x80, 0x37),
-	_INIT_CMD_DCS(0x81, 0x23),
-	_INIT_CMD_DCS(0x82, 0x10),
-	_INIT_CMD_DCS(0xE0, 0x02),
-	_INIT_CMD_DCS(0x00, 0x47),
-	_INIT_CMD_DCS(0x01, 0x47),
-	_INIT_CMD_DCS(0x02, 0x45),
-	_INIT_CMD_DCS(0x03, 0x45),
-	_INIT_CMD_DCS(0x04, 0x4B),
-	_INIT_CMD_DCS(0x05, 0x4B),
-	_INIT_CMD_DCS(0x06, 0x49),
-	_INIT_CMD_DCS(0x07, 0x49),
-	_INIT_CMD_DCS(0x08, 0x41),
-	_INIT_CMD_DCS(0x09, 0x1F),
-	_INIT_CMD_DCS(0x0A, 0x1F),
-	_INIT_CMD_DCS(0x0B, 0x1F),
-	_INIT_CMD_DCS(0x0C, 0x1F),
-	_INIT_CMD_DCS(0x0D, 0x1F),
-	_INIT_CMD_DCS(0x0E, 0x1F),
-	_INIT_CMD_DCS(0x0F, 0x5F),
-	_INIT_CMD_DCS(0x10, 0x5F),
-	_INIT_CMD_DCS(0x11, 0x57),
-	_INIT_CMD_DCS(0x12, 0x77),
-	_INIT_CMD_DCS(0x13, 0x35),
-	_INIT_CMD_DCS(0x14, 0x1F),
-	_INIT_CMD_DCS(0x15, 0x1F),
-	_INIT_CMD_DCS(0x16, 0x46),
-	_INIT_CMD_DCS(0x17, 0x46),
-	_INIT_CMD_DCS(0x18, 0x44),
-	_INIT_CMD_DCS(0x19, 0x44),
-	_INIT_CMD_DCS(0x1A, 0x4A),
-	_INIT_CMD_DCS(0x1B, 0x4A),
-	_INIT_CMD_DCS(0x1C, 0x48),
-	_INIT_CMD_DCS(0x1D, 0x48),
-	_INIT_CMD_DCS(0x1E, 0x40),
-	_INIT_CMD_DCS(0x1F, 0x1F),
-	_INIT_CMD_DCS(0x20, 0x1F),
-	_INIT_CMD_DCS(0x21, 0x1F),
-	_INIT_CMD_DCS(0x22, 0x1F),
-	_INIT_CMD_DCS(0x23, 0x1F),
-	_INIT_CMD_DCS(0x24, 0x1F),
-	_INIT_CMD_DCS(0x25, 0x5F),
-	_INIT_CMD_DCS(0x26, 0x5F),
-	_INIT_CMD_DCS(0x27, 0x57),
-	_INIT_CMD_DCS(0x28, 0x77),
-	_INIT_CMD_DCS(0x29, 0x35),
-	_INIT_CMD_DCS(0x2A, 0x1F),
-	_INIT_CMD_DCS(0x2B, 0x1F),
-	_INIT_CMD_DCS(0x58, 0x40),
-	_INIT_CMD_DCS(0x59, 0x00),
-	_INIT_CMD_DCS(0x5A, 0x00),
-	_INIT_CMD_DCS(0x5B, 0x10),
-	_INIT_CMD_DCS(0x5C, 0x06),
-	_INIT_CMD_DCS(0x5D, 0x40),
-	_INIT_CMD_DCS(0x5E, 0x01),
-	_INIT_CMD_DCS(0x5F, 0x02),
-	_INIT_CMD_DCS(0x60, 0x30),
-	_INIT_CMD_DCS(0x61, 0x01),
-	_INIT_CMD_DCS(0x62, 0x02),
-	_INIT_CMD_DCS(0x63, 0x03),
-	_INIT_CMD_DCS(0x64, 0x6B),
-	_INIT_CMD_DCS(0x65, 0x05),
-	_INIT_CMD_DCS(0x66, 0x0C),
-	_INIT_CMD_DCS(0x67, 0x73),
-	_INIT_CMD_DCS(0x68, 0x09),
-	_INIT_CMD_DCS(0x69, 0x03),
-	_INIT_CMD_DCS(0x6A, 0x56),
-	_INIT_CMD_DCS(0x6B, 0x08),
-	_INIT_CMD_DCS(0x6C, 0x00),
-	_INIT_CMD_DCS(0x6D, 0x04),
-	_INIT_CMD_DCS(0x6E, 0x04),
-	_INIT_CMD_DCS(0x6F, 0x88),
-	_INIT_CMD_DCS(0x70, 0x00),
-	_INIT_CMD_DCS(0x71, 0x00),
-	_INIT_CMD_DCS(0x72, 0x06),
-	_INIT_CMD_DCS(0x73, 0x7B),
-	_INIT_CMD_DCS(0x74, 0x00),
-	_INIT_CMD_DCS(0x75, 0xF8),
-	_INIT_CMD_DCS(0x76, 0x00),
-	_INIT_CMD_DCS(0x77, 0xD5),
-	_INIT_CMD_DCS(0x78, 0x2E),
-	_INIT_CMD_DCS(0x79, 0x12),
-	_INIT_CMD_DCS(0x7A, 0x03),
-	_INIT_CMD_DCS(0x7B, 0x00),
-	_INIT_CMD_DCS(0x7C, 0x00),
-	_INIT_CMD_DCS(0x7D, 0x03),
-	_INIT_CMD_DCS(0x7E, 0x7B),
-	_INIT_CMD_DCS(0xE0, 0x04),
-	_INIT_CMD_DCS(0x00, 0x0E),
-	_INIT_CMD_DCS(0x02, 0xB3),
-	_INIT_CMD_DCS(0x09, 0x60),
-	_INIT_CMD_DCS(0x0E, 0x2A),
-	_INIT_CMD_DCS(0x36, 0x59),
-	_INIT_CMD_DCS(0xE0, 0x00),
+	_INIT_CMD_DCS(0xE0,0xAB,0xBA), 
+	_INIT_CMD_DCS(0xE1,0xBA,0xAB), 
+	_INIT_CMD_DCS(0xB1,0x10,0x01,0x47,0xFF), 
+	_INIT_CMD_DCS(0xB2,0x0C,0x14,0x04,0x50,0x50,0x14), 
+	_INIT_CMD_DCS(0xB3,0x56,0x53,0x00), 
+	_INIT_CMD_DCS(0xB4,0x33,0x30,0x04), 
+	_INIT_CMD_DCS(0xB6,0xB0,0x00,0x00,0x10,0x00,0x10,0x00), 
+	_INIT_CMD_DCS(0xB8,0x05,0x12,0x29,0x49,0x48,0x00,0x00), 
+	_INIT_CMD_DCS(0xB9,0x7C,0x65,0x55,0x49,0x46,0x36,0x3B,0x24,0x3D,0x3C,0x3D,0x5C,0x4C,0x55,0x47,0x46,0x39,0x26,0x06,0x7C,0x65,0x55,0x49,0x46,0x36,0x3B,0x24,0x3D,0x3C,0x3D,0x5C,0x4C,0x55,0x47,0x46,0x39,0x26,0x06), 
+	_INIT_CMD_DCS(0xC0,0xFF,0x87,0x12,0x34,0x44,0x44,0x44,0x44,0x98,0x04,0x98,0x04,0x0F,0x00,0x00,0xC1), 
+	_INIT_CMD_DCS(0xC1,0x54,0x94,0x02,0x85,0x9F,0x00,0x7F,0x00,0x54,0x00), 
+	_INIT_CMD_DCS(0xC2,0x17,0x09,0x08,0x89,0x08,0x11,0x22,0x20,0x44,0xFF,0x18,0x00), 
+	_INIT_CMD_DCS(0xC3,0x86,0x46,0x05,0x05,0x1C,0x1C,0x1D,0x1D,0x02,0x1F,0x1F,0x1E,0x1E,0x0F,0x0F,0x0D,0x0D,0x13,0x13,0x11,0x11,0x00), 
+	_INIT_CMD_DCS(0xC4,0x07,0x07,0x04,0x04,0x1C,0x1C,0x1D,0x1D,0x02,0x1F,0x1F,0x1E,0x1E,0x0E,0x0E,0x0C,0x0C,0x12,0x12,0x10,0x10,0x00), 
+	_INIT_CMD_DCS(0xC6,0x2A,0x2A), 
+	_INIT_CMD_DCS(0xC8,0x21,0x00,0x31,0x42,0x34,0x16), 
+	_INIT_CMD_DCS(0xCA,0xCB,0x43), 
+	_INIT_CMD_DCS(0xCD,0x0E,0x4B,0x4B,0x20,0x19,0x6B,0x06,0xB3), 
+	_INIT_CMD_DCS(0xD2,0xE3,0x2B,0x38,0x00), 
+	_INIT_CMD_DCS(0xD4,0x00,0x01,0x00,0x0E,0x04,0x44,0x08,0x10,0x00,0x00,0x00), 
+	_INIT_CMD_DCS(0xE6,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF), 
+	_INIT_CMD_DCS(0xF0,0x12,0x03,0x20,0x00,0xFF), 
+	_INIT_CMD_DCS(0xF3,0x00), 
 
 	_INIT_CMD_DELAY(120),
 };
 
 static const struct display_timing jadard_timing = {
-	.pixelclock = { 79200000, 79200000, 79200000 },
+	.pixelclock = { 66000000, 66000000, 66000000},
 	.hactive = { 800, 800, 800 },
-	.hfront_porch = {  356, 356, 356 },
-	.hback_porch = { 134, 134, 134 },
-	.hsync_len = { 7, 7, 7 },
+	.hfront_porch = {  44, 44, 44},
+	.hback_porch = { 5, 5, 5},
+	.hsync_len = { 5, 5, 5 },
 	.vactive = { 1280, 1280, 1280 },
-	.vfront_porch = { 84, 84, 84 },
-	.vback_porch = { 20, 20, 20 },
-	.vsync_len = { 9, 9, 9 },
+	.vfront_porch = { 5, 5, 5},
+	.vback_porch = { 5, 5, 5 },
+	.vsync_len = { 5, 5, 5 },
 	.flags = DISPLAY_FLAGS_DE_LOW,
 };
 
 static const struct jadard_panel_desc cz101b4001_desc = {
 	.mode = {
-		.clock		= 79200,
+		.clock		= 66000,
 
 		.hdisplay	= 800,
-		.hsync_start	= 800 + 139,
-		.hsync_end	= 800 + 139 + 5,
-		.htotal		= 800 + 139 + 5 + 5,
+		.hsync_start	= 800 + 44,
+		.hsync_end	= 800 + 44 + 5,
+		.htotal		= 800 + 44 + 5 + 5,
 
 		.vdisplay	= 1280,
-		.vsync_start	= 1280 + 84,
-		.vsync_end	= 1280 + 84 + 20,
-		.vtotal		= 1280 + 84+ 20 + 7,
+		.vsync_start	= 1280 + 5,
+		.vsync_end	= 1280 + 5 + 5,
+		.vtotal		= 1280 + 5 + 5 + 5,
 
-		.width_mm	= 62,
-		.height_mm	= 110,
+		.width_mm	= 135,
+		.height_mm	= 216,
 		.type		= DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED,
 	},
 	.lanes = 4,
@@ -514,7 +372,7 @@ static int panel_probe(struct i2c_client *client, const struct i2c_device_id *id
 	int ret = 0;
 	struct mipi_dsi_device_info info = {
 		.type = DSI_DRIVER_NAME,
-		.channel = 1, //0,
+		.channel = 3, //0,
 		.node = NULL,
 	};
 
@@ -537,7 +395,15 @@ static int panel_probe(struct i2c_client *client, const struct i2c_device_id *id
 	jd_panel->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
 	if (IS_ERR(jd_panel->reset)) {
 		DRM_DEV_ERROR(dev, "failed to get our reset GPIO\n");
-		return PTR_ERR(jd_panel->reset);
+		//return PTR_ERR(jd_panel->reset);
+	}
+	jd_panel->blen = devm_gpiod_get(dev, "blen", GPIOD_OUT_HIGH);
+	if (IS_ERR(jd_panel->blen)) {
+		DRM_DEV_ERROR(dev, "failed to get our blen GPIO\n");
+		//return PTR_ERR(jd_panel->reset);
+	} else {
+		gpiod_direction_output(jd_panel->blen, 0);
+		gpiod_set_value(jd_panel->blen, 1);
 	}
 
 	jd_panel->enable = devm_gpiod_get(dev, "enable", GPIOD_OUT_LOW);
@@ -547,9 +413,9 @@ static int panel_probe(struct i2c_client *client, const struct i2c_device_id *id
 	}
 
 	/*use i2c read to detect whether the panel has connected */
-	ret = jadard_i2c_read(client, 0x00, &reg_value);
-	if (ret < 0)
-		return -ENODEV;
+	// ret = jadard_i2c_read(client, 0x00, &reg_value);
+	// if (ret < 0)
+	// 	DRM_DEV_ERROR(dev, "failed to read i2c\n");
 
 	endpoint = of_graph_get_next_endpoint(dev->of_node, NULL);
 	if (!endpoint)
@@ -569,18 +435,33 @@ static int panel_probe(struct i2c_client *client, const struct i2c_device_id *id
 	drm_panel_init(&jd_panel->panel, dev, &jadard_funcs,
 		       DRM_MODE_CONNECTOR_DSI);
 
+	ret = of_drm_get_panel_orientation(dev->of_node, &jd_panel->orientation);
+	if (ret) {
+		DRM_DEV_ERROR(dev, "%pOF: failed to get orientation %d\n", dev->of_node, ret);
+		goto error;
+	}
+	DRM_DEV_ERROR(dev, "%pOF: get orientation %d\n", dev->of_node, jd_panel->orientation);
+
+	ret = drm_panel_of_backlight(&jd_panel->panel);
+	if (ret) {
+		DRM_DEV_ERROR(dev, "failed to get backlight: %d\n", ret);
+		goto error;
+	}
+
 	drm_panel_add(&jd_panel->panel);
 
 	info.node = of_node_get(of_graph_get_remote_port(endpoint));
-	if (!info.node)
+	if (!info.node) {
+		DRM_DEV_ERROR(dev, "failed to get remote port\n");
 		goto error;
+	}
 
 	of_node_put(endpoint);
 	jd_panel->desc = desc;
 
 	jd_panel->dsi = mipi_dsi_device_register_full(host, &info);
 	if (IS_ERR(jd_panel->dsi)) {
-		dev_err(dev, "DSI device registration failed: %ld\n",
+		DRM_DEV_ERROR(dev, "DSI device registration failed: %ld\n",
 			PTR_ERR(jd_panel->dsi));
 		return PTR_ERR(jd_panel->dsi);
 	}
@@ -639,11 +520,11 @@ static int jadard_dsi_probe(struct mipi_dsi_device *dsi)
 
 	int ret;
 
-	dsi->mode_flags = MIPI_DSI_MODE_LPM | MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_SYNC_PULSE ;
+	dsi->mode_flags = MIPI_DSI_MODE_LPM | MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_SYNC_PULSE | MIPI_DSI_CLOCK_NON_CONTINUOUS;
 	dsi->format = MIPI_DSI_FMT_RGB888;
 	dsi->lanes = 4;
-	dsi->channel = 1;
-	dsi->hs_rate = 490000000;
+	dsi->channel = 3;
+	dsi->hs_rate = 400000000;
 
 	ret = mipi_dsi_attach(dsi);
 	if (ret < 0) {
diff --git a/drivers/gpu/drm/verisilicon/starfive_drm_dsi.c b/drivers/gpu/drm/verisilicon/starfive_drm_dsi.c
index fc0486a44acf..80c39a4371d5 100644
--- a/drivers/gpu/drm/verisilicon/starfive_drm_dsi.c
+++ b/drivers/gpu/drm/verisilicon/starfive_drm_dsi.c
@@ -757,12 +757,15 @@ static int cdns_dsi_mode2cfg(struct cdns_dsi *dsi,
 		dsi_cfg->hbp = 134-DSI_HBP_FRAME_OVERHEAD;
 		dsi_cfg->hfp = 356-DSI_HFP_FRAME_OVERHEAD;
 
-	}
-	else if (output->dev->channel == 2){//raxda 10 inch config
+	} else if (output->dev->channel == 2){//raxda 10 inch config
 		dsi_cfg->hsa = 405-DSI_HSA_FRAME_OVERHEAD;
 		dsi_cfg->hbp = 403-DSI_HBP_FRAME_OVERHEAD;
 		dsi_cfg->hfp = 396-DSI_HFP_FRAME_OVERHEAD;
 
+	} else if (output->dev->channel == 3){//pinetab
+		dsi_cfg->hsa = 66 - DSI_HSA_FRAME_OVERHEAD;
+		dsi_cfg->hbp = 64 - DSI_HBP_FRAME_OVERHEAD;
+		dsi_cfg->hfp = 57 - DSI_HFP_FRAME_OVERHEAD;
 	}
 
 	return 0;
@@ -849,6 +852,8 @@ static int cdns_dsi_check_conf(struct cdns_dsi *dsi,
 		phy_cfg->hs_clk_rate = 490000000;//8 inch
 	} else if (output->dev->channel == 2){
 		phy_cfg->hs_clk_rate = 980000000;//10 inch
+	} else if (output->dev->channel == 3){
+		phy_cfg->hs_clk_rate = 400000000;
 	}
 
 	dsi_cfg->htotal = dsi_cfg->hsa + DSI_HSA_FRAME_OVERHEAD +
diff --git a/drivers/gpu/drm/verisilicon/vs_dc.c b/drivers/gpu/drm/verisilicon/vs_dc.c
index 67c1c03989ba..ad41dfb13b41 100755
--- a/drivers/gpu/drm/verisilicon/vs_dc.c
+++ b/drivers/gpu/drm/verisilicon/vs_dc.c
@@ -1367,7 +1367,7 @@ static irqreturn_t dc_isr(int irq, void *data)
 	struct vs_dc_info *dc_info = dc->hw.info;
 	u32 i, ret;
 
-	if(!dc_info)
+	if(!dc->init_count)
 	  return IRQ_HANDLED;
 
 	ret = dc_hw_get_interrupt(&dc->hw);
