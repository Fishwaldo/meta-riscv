From 894bdf19ed68f7c0211b91597d2e5aa4f8e21af0 Mon Sep 17 00:00:00 2001
From: Justin Hammond <justin@dynam.ac>
Date: Fri, 11 Aug 2023 14:25:57 +0000
Subject: [PATCH] Revert "power: supply: bq25890: Add support for registering
 the Vbus boost converter as a regulator"

This reverts commit 79d35365a5858466ff7b37aaf1fcf11b683b9442.
---
 drivers/power/supply/bq25890_charger.c | 80 --------------------------
 1 file changed, 80 deletions(-)

diff --git a/drivers/power/supply/bq25890_charger.c b/drivers/power/supply/bq25890_charger.c
index f5368be32843..0ffea8eaa2bb 100644
--- a/drivers/power/supply/bq25890_charger.c
+++ b/drivers/power/supply/bq25890_charger.c
@@ -8,9 +8,7 @@
 #include <linux/module.h>
 #include <linux/i2c.h>
 #include <linux/power_supply.h>
-#include <linux/power/bq25890_charger.h>
 #include <linux/regmap.h>
-#include <linux/regulator/driver.h>
 #include <linux/types.h>
 #include <linux/gpio/consumer.h>
 #include <linux/interrupt.h>
@@ -1012,45 +1010,6 @@ static int bq25890_usb_notifier(struct notifier_block *nb, unsigned long val,
 	return NOTIFY_OK;
 }
 
-#ifdef CONFIG_REGULATOR
-static int bq25890_vbus_enable(struct regulator_dev *rdev)
-{
-	struct bq25890_device *bq = rdev_get_drvdata(rdev);
-
-	return bq25890_set_otg_cfg(bq, 1);
-}
-
-static int bq25890_vbus_disable(struct regulator_dev *rdev)
-{
-	struct bq25890_device *bq = rdev_get_drvdata(rdev);
-
-	return bq25890_set_otg_cfg(bq, 0);
-}
-
-static int bq25890_vbus_is_enabled(struct regulator_dev *rdev)
-{
-	struct bq25890_device *bq = rdev_get_drvdata(rdev);
-
-	return bq25890_field_read(bq, F_OTG_CFG);
-}
-
-static const struct regulator_ops bq25890_vbus_ops = {
-	.enable = bq25890_vbus_enable,
-	.disable = bq25890_vbus_disable,
-	.is_enabled = bq25890_vbus_is_enabled,
-};
-
-static const struct regulator_desc bq25890_vbus_desc = {
-	.name = "usb_otg_vbus",
-	.of_match = "usb-otg-vbus",
-	.type = REGULATOR_VOLTAGE,
-	.owner = THIS_MODULE,
-	.ops = &bq25890_vbus_ops,
-	.fixed_uV = 5000000,
-	.n_voltages = 1,
-};
-#endif
-
 static int bq25890_get_chip_version(struct bq25890_device *bq)
 {
 	int id, rev;
@@ -1249,22 +1208,6 @@ static int bq25890_probe(struct i2c_client *client,
 		bq->usb_nb.notifier_call = bq25890_usb_notifier;
 		usb_register_notifier(bq->usb_phy, &bq->usb_nb);
 	}
-#ifdef CONFIG_REGULATOR
-	else {
-		struct bq25890_platform_data *pdata = dev_get_platdata(dev);
-		struct regulator_config cfg = { };
-		struct regulator_dev *reg;
-
-		cfg.dev = dev;
-		cfg.driver_data = bq;
-		if (pdata)
-			cfg.init_data = pdata->regulator_init_data;
-
-		reg = devm_regulator_register(dev, &bq25890_vbus_desc, &cfg);
-		if (IS_ERR(reg))
-			return dev_err_probe(dev, PTR_ERR(reg), "registering regulator");
-	}
-#endif
 
 	ret = bq25890_power_supply_init(bq);
 	if (ret < 0) {
@@ -1303,28 +1246,6 @@ static int bq25890_remove(struct i2c_client *client)
 	return 0;
 }
 
-static void bq25890_shutdown(struct i2c_client *client)
-{
-	struct bq25890_device *bq = i2c_get_clientdata(client);
-
-	/*
-	 * TODO this if + return should probably be removed, but that would
-	 * introduce a function change for boards using the usb-phy framework.
-	 * This needs to be tested on such a board before making this change.
-	 */
-	if (!IS_ERR_OR_NULL(bq->usb_phy))
-		return;
-
-	/*
-	 * Turn off the 5v Boost regulator which outputs Vbus to the device's
-	 * Micro-USB or Type-C USB port. Leaving this on drains power and
-	 * this avoids the PMIC on some device-models seeing this as Vbus
-	 * getting inserted after shutdown, causing the device to immediately
-	 * power-up again.
-	 */
-	bq25890_set_otg_cfg(bq, 0);
-}
-
 #ifdef CONFIG_PM_SLEEP
 static int bq25890_suspend(struct device *dev)
 {
@@ -1404,7 +1325,6 @@ static struct i2c_driver bq25890_driver = {
 	},
 	.probe = bq25890_probe,
 	.remove = bq25890_remove,
-	.shutdown = bq25890_shutdown,
 	.id_table = bq25890_i2c_ids,
 };
 module_i2c_driver(bq25890_driver);
